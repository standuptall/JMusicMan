/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package it.albe.JMusicMan;

import static it.albe.JMusicMan.JMusicMan.checkFileName;
import it.albe.utils.IO;
import java.awt.Toolkit;
import java.util.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.tree.*;
import java.io.*;
import javax.swing.UIManager;
import org.jdom.input.*;
import org.jdom.*;
import org.jdom.Element;
import org.jdom.filter.ElementFilter;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;
import org.jaudiotagger.audio.AudioFile;
import org.jaudiotagger.audio.AudioFileIO;
import org.jaudiotagger.tag.FieldKey;
import org.jaudiotagger.tag.Tag;

/**
 *
 * @author Alberto
 */
public class Frame extends javax.swing.JFrame{

    /**
     * Creates new form Frame
     */
    public Frame() {
        try{
           UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
           javax.swing.SwingUtilities.updateComponentTreeUI(this);
        }
        catch (Exception e){
            IO.err(this, "Errore nel settare il look and feel:"+e.toString());
        
        }
        initComponents();
        this.setLocation((Toolkit.getDefaultToolkit().getScreenSize().width)/2 - this.getWidth()/2, (Toolkit.getDefaultToolkit().getScreenSize().height)/2 - this.getHeight()/2);
        
        jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent tse) {
                
                DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getLastSelectedPathComponent();
                if (node==null)
                    return;
                
                if (node.isLeaf()){
                    Album album = (Album)node.getUserObject();
                    javax.swing.DefaultListModel model = new javax.swing.DefaultListModel();
                    for (int i=0;i<album.getNumberOfTracks();i++){
                        model.addElement(album.getTrackAt(i));
                    }
                    jList1.setModel(model);
                }
                
                    
                    
            }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jList1.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if (!lse.getValueIsAdjusting()){
                    Track track = (Track)jList1.getSelectedValue();
                    try{
                        if (JMusicMan.playerDir!="")
                            Runtime.getRuntime().exec(JMusicMan.playerDir + " \"" + track.getPath() + "\"");
                    }
                    catch(Exception e){
                        IO.err(null, "Errore nell'eseguire il player:"+e.toString());
                    }
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        modificaPopumMenu = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jProgressBar1 = new javax.swing.JProgressBar();
        label = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        libreriaMenu = new javax.swing.JMenu();
        aggiornaMenuItem = new javax.swing.JMenuItem();
        aggiungiMenuItem = new javax.swing.JMenuItem();
        impostaPlayerMenuItem = new javax.swing.JMenuItem();
        impostaCartellaMenuItem = new javax.swing.JMenuItem();
        sincronizzazioneMenu = new javax.swing.JMenu();
        rilevaDispositivoMenuItem = new javax.swing.JMenuItem();
        sincronizzaMenuItem = new javax.swing.JMenuItem();
        infoMenu = new javax.swing.JMenu();
        aboutItem = new javax.swing.JMenuItem();

        modificaPopumMenu.setLabel("Modifica...");
        modificaPopumMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificaPopumMenuActionPerformed(evt);
            }
        });
        jPopupMenu1.add(modificaPopumMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JMusicMan");
        setResizable(false);

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(500, 250));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(290, 324));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setDoubleBuffered(true);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("JMusicManLibrary");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setAutoscrolls(true);
        jTree1.setMaximumSize(new java.awt.Dimension(107, 1000));
        jTree1.setPreferredSize(new java.awt.Dimension(107, 600));
        jTree1.setRowHeight(0);
        jScrollPane1.setViewportView(jTree1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Frame.this.mouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jSplitPane1.setRightComponent(jScrollPane2);

        libreriaMenu.setText("Libreria");
        libreriaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                libreriaMenuActionPerformed(evt);
            }
        });

        aggiornaMenuItem.setText("Aggiorna");
        aggiornaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggiornaMenuItemActionPerformed(evt);
            }
        });
        libreriaMenu.add(aggiornaMenuItem);

        aggiungiMenuItem.setText("Aggiungi...");
        libreriaMenu.add(aggiungiMenuItem);

        impostaPlayerMenuItem.setText("Imposta player predefinito");
        impostaPlayerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                impostaPlayerMenuItemActionPerformed(evt);
            }
        });
        libreriaMenu.add(impostaPlayerMenuItem);

        impostaCartellaMenuItem.setText("Imposta cartella");
        libreriaMenu.add(impostaCartellaMenuItem);

        jMenuBar1.add(libreriaMenu);

        sincronizzazioneMenu.setText("Sincronizzazione");

        rilevaDispositivoMenuItem.setText("Rileva dispositivo");
        rilevaDispositivoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rilevaDispositivoMenuItemActionPerformed(evt);
            }
        });
        sincronizzazioneMenu.add(rilevaDispositivoMenuItem);

        sincronizzaMenuItem.setText("Sincronizza");
        sincronizzaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sincronizzaMenuItemActionPerformed(evt);
            }
        });
        sincronizzazioneMenu.add(sincronizzaMenuItem);

        jMenuBar1.add(sincronizzazioneMenu);

        infoMenu.setText("Info");

        aboutItem.setText("About...");
        aboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutItemActionPerformed(evt);
            }
        });
        infoMenu.add(aboutItem);

        jMenuBar1.add(infoMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aggiornaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggiornaMenuItemActionPerformed
        JMusicMan.update();
    }//GEN-LAST:event_aggiornaMenuItemActionPerformed

    private void libreriaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_libreriaMenuActionPerformed
        
    }//GEN-LAST:event_libreriaMenuActionPerformed

    private void rilevaDispositivoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rilevaDispositivoMenuItemActionPerformed
        final FrameDetect frame = new FrameDetect();
        java.awt.EventQueue.invokeLater(new Runnable(){
            public void run(){
                frame.setVisible(true);
            }
        });
    }//GEN-LAST:event_rilevaDispositivoMenuItemActionPerformed

    @SuppressWarnings("empty-statement")
    private void sincronizzaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sincronizzaMenuItemActionPerformed
        if (JMusicMan.root!=null){
            File database = new File(JMusicMan.root.getAbsolutePath()+"\\Music\\JMusicManLibrary.xml");
            
            SAXBuilder builder = new SAXBuilder();
            Document document;
            try{
                if (!database.exists())
                        JMusicMan.createEmptyDocument(database);
                
                document = builder.build(database);
                Element rootElement = document.getRootElement();
                Element lasteditElement = rootElement.getChild("lastedit");
                long lastedit = Long.valueOf(lasteditElement.getText());
                if (lastedit>=JMusicMan.lastedit)
                    IO.print(this, "La libreria del dispositivo è aggiornata");
                else {
                    /* Carico database dispositivo */
                    ElementFilter filter = new ElementFilter();
                    java.util.Iterator<Element> ciao = document.getDescendants(filter);
                    ArrayList<Element> arrayDispositivo = new ArrayList<Element>();
                    while (ciao.hasNext()){
                        Element element  = ciao.next();
                        String text = element.getName();
                        if (text.equals("track"))
                             arrayDispositivo.add(element);
                    }
                    /*Carico database locale */
                    document = builder.build(JMusicMan.directory+"\\JMusicManLibrary.xml");
                    rootElement = document.getRootElement();
                    ciao = document.getDescendants(filter);
                    ArrayList<Element> arraylocale = new ArrayList<Element>();
                    while (ciao.hasNext()){
                         Element element  = ciao.next();
                         String text = element.getName();
                         if (text.equals("track"))
                              arraylocale.add(element);
                     }
                    /*determino tracce da copiare */
                    ArrayList<Track> tracks = JMusicMan.findTracksToCopy(arrayDispositivo, arraylocale);
                    int fileCopiati = tracks.size();
                    /*Trovo e cancello le tracce che non sono più presenti sul PC (eliminate dalla libreria)*/
                    int fileEliminati = JMusicMan.findTrackToDelete(arrayDispositivo, arraylocale,JMusicMan.root.getAbsolutePath()+"\\Music\\" );
                    
                    
                    /*copio le tracce */
                    if (tracks.size()>0)
                        JMusicMan.copyTracks(tracks, JMusicMan.root.getAbsolutePath()+"\\Music\\");
                    /*copio i file di database */ 
                    FileInputStream reader = new FileInputStream(new File(JMusicMan.directory+"\\JMusicManLibrary.xml"));
                    FileOutputStream writer = new FileOutputStream(database);
                    byte[] bytes =  new byte[1024];
                    int numbytes;
                    while ((numbytes = reader.read(bytes))>0){
                        writer.write(bytes,0,numbytes);
                    }
                    reader.close();
                    writer.close();
                    IO.print(this, "Dispositivo: " +Integer.toString(fileCopiati)+" file copiati e "+Integer.toString(fileEliminati)+" file eliminati");
                }
            }
            catch (Exception e){
                IO.err(this, "Errore durante la sincronizzazione:"+e.toString());
        
            }
        }
        else IO.err(this, "Imposta prima il dispositivo!");
    }//GEN-LAST:event_sincronizzaMenuItemActionPerformed

    private void aboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutItemActionPerformed
        IO.print(this, "JMusicMan versione "+Version.getVersion()+"\n(c) 2016 Alberto Zichittella\nIl programma non fornisce alcuna garanzia.\nRilasciato sotto licenza GPL3" );
    }//GEN-LAST:event_aboutItemActionPerformed

    private void impostaPlayerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_impostaPlayerMenuItemActionPerformed
        javax.swing.JFileChooser fchooser = new javax.swing.JFileChooser();
        int sc = fchooser.showOpenDialog(this);
        if (sc==javax.swing.JFileChooser.APPROVE_OPTION){
            if (!fchooser.getSelectedFile().getAbsolutePath().endsWith(".exe"))
                IO.print(this, "Il file selezionato non è un eseguibile!");
            else {
                JMusicMan.playerDir = fchooser.getSelectedFile().getAbsolutePath();
                Element element = new Element("player");
                element.setText(JMusicMan.playerDir);
                JMusicMan.document.getRootElement().addContent(element);
                XMLOutputter xmlOutput = new XMLOutputter();
                xmlOutput.setFormat(Format.getPrettyFormat());
                try{
                    xmlOutput.output(JMusicMan.document,new FileWriter(JMusicMan.directory+"JMusicManLibrary.xml"));
                }
                catch (Exception e){
                    IO.err(this, "Errore nello impostare il player:"+e.toString());
                }
             }
                
        }
            
    }//GEN-LAST:event_impostaPlayerMenuItemActionPerformed
    /*
     * Evento appartenente al menù contestuale della lista
     * 
     */
    private void mouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseClicked
        Track track = null;
        try{
            if (evt.getButton()==3){
                List<Track> tracks = jList1.getSelectedValuesList();
                if (tracks.isEmpty())
                    throw new java.lang.NullPointerException("Nessuna traccia selezionata");
                jPopupMenu1.show(this.jList1,evt.getX(),evt.getY());
            }
        }
        catch (Exception e){
            
        }
    }//GEN-LAST:event_mouseClicked
    /*
     * Evento appartenente al menù contestuale della lista
     */
    private void modificaPopumMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificaPopumMenuActionPerformed
        EditInfo dialog = new EditInfo(this,true,jList1.getSelectedValuesList());
        dialog.setVisible(true);
        if (dialog.getResponse()==1){   //se hai premuto OK...
            for (int i=0;i<dialog.getTracks().size();i++)
            try{
                Track track = dialog.getTracks().get(i);
                AudioFile audioFile = AudioFileIO.read(new File(track.getPath()));
                Tag tag = audioFile.getTag();
                if (dialog.albumModified)
                    tag.setField(FieldKey.ALBUM,track.getAlbum());
                if (dialog.titleModified)
                    tag.setField(FieldKey.TITLE,track.getName());
                if (dialog.artistModified)
                    tag.setField(FieldKey.ARTIST,track.getArtist());
                if (dialog.imageModified)
                    ;//audioFile.setAlbumImage(track.getImg(), "image/png");
                if (dialog.trackModified)
                    tag.setField(FieldKey.TRACK,track.getNumber());
                
                audioFile.commit();
                Track newTrack = new Track(track.getArtist(),track.getName(),track.getAlbum(),track.getPath(),track.getNumber());//aggiungo un "mp3" per cambiare path, altrimenti mp3agic dà errore
                JMusicMan.organize(new File(newTrack.getPath()), track.getArtist(), track.getAlbum(), track.getName(), track.getNumber());
                JMusicMan.updateTrack(newTrack, dialog.editResult());
                File file = new File(track.getPath());
                file.delete();
            }
            catch (Exception e){
                System.out.print(e.getMessage());
            }
            dialog.dispose();
        }
    }//GEN-LAST:event_modificaPopumMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
        /*
        it.albe.FlacReader.FlacReader flacreader = new it.albe.FlacReader.FlacReader("C:\\Alberto\\recit16bit.flac");
        flacreader.addComment("artist", "Adriano Celentano");
        flacreader.addComment("album", "24000 baci");
        flacreader.addComment("title", "una carezza in un pugno");
        flacreader.addComment("track", "6");
        flacreader.writeAll();*/
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JMenuItem aggiornaMenuItem;
    private javax.swing.JMenuItem aggiungiMenuItem;
    private javax.swing.JMenuItem impostaCartellaMenuItem;
    private javax.swing.JMenuItem impostaPlayerMenuItem;
    private javax.swing.JMenu infoMenu;
    private javax.swing.JList jList1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu1;
    public javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    public javax.swing.JTree jTree1;
    public javax.swing.JLabel label;
    private javax.swing.JMenu libreriaMenu;
    private javax.swing.JMenuItem modificaPopumMenu;
    private javax.swing.JMenuItem rilevaDispositivoMenuItem;
    private javax.swing.JMenuItem sincronizzaMenuItem;
    private javax.swing.JMenu sincronizzazioneMenu;
    // End of variables declaration//GEN-END:variables
}
